# Generated by Django 4.0.6 on 2024-04-18 20:35

from django.db import migrations


def get_calculated_cost(obj):
    pass
    # UNIT = 1_000_000

    # if not obj.input_tokens or not obj.output_tokens or not obj.ai_model:
    #     return 0

    # input_unit = obj.ai_model.input_price / UNIT
    # output_unit = obj.ai_model.output_price / UNIT

    # input_value = input_unit * obj.input_tokens
    # output_value = output_unit * obj.output_tokens
    # return input_value + output_value


def add_ai_model(apps, schema_editor):
    pass
    # AIModel = apps.get_model('ai', 'AIModel')
    # OpenAIQuery = apps.get_model('ai', 'OpenAIQuery')

    # gpt_3_5_turbo_1106, _ = AIModel.objects.get_or_create(
    #   identifier='gpt-3.5-turbo-1106', input_price=1, output_price=2
    # )
    # gpt_4_1106_vision_preview, _ = AIModel.objects.get_or_create(
    #   identifier='gpt-4-1106-vision-preview', input_price=10, output_price=30
    # )

    # for query in OpenAIQuery.objects.filter(gpt_model='gpt-3.5-turbo-1106'):
    #     query.ai_model = gpt_3_5_turbo_1106
    #     query.cost = get_calculated_cost(query)
    #     query.save()

    # for query in OpenAIQuery.objects.filter(gpt_model='gpt-4-vision-preview'):
    #     query.ai_model = gpt_4_1106_vision_preview
    #     query.cost = get_calculated_cost(query)
    #     query.save()


class Migration(migrations.Migration):

    dependencies = [
        ('ai', '0013_aimodel_openaiquery_cost_openaiquery_ai_model'),
    ]

    operations = [
        migrations.RunPython(
            code=add_ai_model,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
