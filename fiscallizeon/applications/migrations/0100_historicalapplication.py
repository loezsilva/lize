# Generated by Django 4.0.6 on 2024-06-01 01:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import tinymce.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('exams', '0169_merge_20240522_0925'),
        ('distribution', '0018_alter_roomdistribution_status'),
        ('applications', '0099_application_max_time_finish'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalApplication',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date', models.DateField(verbose_name='Data do início da aplicação')),
                ('start', models.TimeField(verbose_name='Horário inicial da aplicação')),
                ('end', models.TimeField(verbose_name='Horário final da aplicação')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='Data final da aplicação')),
                ('min_time_finish', models.DurationField(blank=True, default='01:00:00', help_text='Formato: HH:MM:SS', verbose_name='Tempo mínimo para finalizar prova')),
                ('min_time_pause', models.DurationField(blank=True, default='01:00:00', help_text='Formato: HH:MM:SS', verbose_name='Tempo mínimo para pausar prova')),
                ('max_time_tolerance', models.DurationField(blank=True, default='00:10:00', help_text='Formato: HH:MM:SS', verbose_name='Tempo de tolerância para iniciar a prova')),
                ('max_time_finish', models.DurationField(blank=True, help_text='Formato: HH:MM:SS', null=True, verbose_name='Tempo máximo para realização')),
                ('block_after_tolerance', models.BooleanField(default=False, help_text='Marque se o aluno não poderá acessar o ambiente de prova após o tempo de tolerância', verbose_name='Bloquear prova após tolerância')),
                ('subject', models.CharField(blank=True, help_text='Separe cada disciplina por virgula (,) ', max_length=150, null=True, verbose_name='Disciplinas')),
                ('orientations', tinymce.models.HTMLField(blank=True, default='<ul><li></li></ul>', null=True, verbose_name='Orientações para aplicação')),
                ('orchestrator_id', models.CharField(blank=True, max_length=150, null=True, verbose_name='Id da aplicação no orquestrador')),
                ('prefix', models.CharField(blank=True, max_length=150, null=True, verbose_name='Prefixo do domínio na Digital Ocean')),
                ('text_room_id', models.CharField(blank=True, max_length=150, null=True, verbose_name='Id do ChatRoom no Janus')),
                ('text_room_pin', models.CharField(blank=True, max_length=150, null=True, verbose_name='Pin do ChatRoom no Janus')),
                ('video_room_id', models.CharField(blank=True, help_text='Identificador único da sala de video no Janus', max_length=255, null=True, verbose_name='ID da Sala de video no Janus')),
                ('video_room_pin', models.CharField(blank=True, help_text='Código obrigatório para entrar na sala', max_length=255, null=True, verbose_name='PIN da Sala de video no Janus')),
                ('video_room_secret', models.CharField(blank=True, help_text='Código necessário para editar e excluir sala', max_length=255, null=True, verbose_name='Secret da sala de video no Janus')),
                ('can_be_done_pc', models.BooleanField(default=True, help_text='Marque se o aluno pode fazer no computador', verbose_name='Pode ser feito no PC')),
                ('can_be_done_cell', models.BooleanField(default=True, help_text='Marque se o aluno pode fazer no Celular', verbose_name='Pode ser feito no Celular')),
                ('can_be_done_tablet', models.BooleanField(default=True, help_text='Marque se o aluno pode fazer no Tablet', verbose_name='Pode ser feito no Tablet')),
                ('duplicate_application', models.BooleanField(default=False, verbose_name='Aplicação Duplicada')),
                ('print_ready', models.BooleanField(default=False, verbose_name='Pronta para impressão')),
                ('book_is_printed', models.BooleanField(default=False, verbose_name='Caderno já impresso')),
                ('book_pages', models.IntegerField(default=0, verbose_name='Páginas do caderno')),
                ('bag_pages', models.IntegerField(default=0, verbose_name='Páginas do malote')),
                ('category', models.PositiveSmallIntegerField(choices=[(2, 'Online'), (3, 'Presencial'), (4, 'Lista de Exercício')], default=2, verbose_name='Qual tipo de aplicação?')),
                ('student_stats_permission_date', models.DateTimeField(blank=True, null=True, verbose_name='Data para liberação dos resultados para os alunos')),
                ('last_answer_sheet_generation', models.DateTimeField(blank=True, null=True, verbose_name='Data da última geração de gabarito')),
                ('end_last_answer_sheet_generation', models.DateTimeField(blank=True, null=True, verbose_name='Data final da última geração de gabarito')),
                ('answer_sheet', models.TextField(blank=True, max_length=512, null=True, verbose_name='Caderno de respostas')),
                ('sheet_exporting_status', models.PositiveSmallIntegerField(choices=[(0, 'Aguardando'), (1, 'Exportando'), (2, 'Finalizado'), (3, 'Erro'), (4, 'Desconhecido')], default=0, verbose_name='Status da exportação da folha de repsostas')),
                ('sheet_exporting_count', models.PositiveSmallIntegerField(default=0, verbose_name='Quantidade de exportações')),
                ('is_presential_sync', models.BooleanField(default=False)),
                ('deadline_to_request_review', models.DateField(blank=True, help_text='Limite para o aluno solicitar a revisão da resposta', null=True, verbose_name='Data limite para o aluno solicitar correção da resposta')),
                ('inspectors_fiscallize', models.BooleanField(default=False, help_text='Marque essa opção se deseja um fiscal Fiscallize', verbose_name='Fiscais da Fiscallize')),
                ('automatic_creation', models.BooleanField(default=False, verbose_name='Gerada automaticamente')),
                ('leveling_test', models.BooleanField(default=False, verbose_name='Lista de nivelamento, para novos alunos')),
                ('priority', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Baixa'), (1, 'Média'), (2, 'Alta')], default=0, verbose_name='Prioridade')),
                ('release_result_at_end', models.BooleanField(default=False, verbose_name='liberar resultado ao finalizar?')),
                ('deadline_for_correction_of_responses', models.DateField(blank=True, help_text='Limite para os professores corrigirem as respostas', null=True, verbose_name='Data limite para os professores corrigirem as respostas')),
                ('deadline_for_sending_response_letters', models.DateField(blank=True, help_text='Limite para o envio dos cartões resposta', null=True, verbose_name='Data limite para envio dos cartões resposta')),
                ('show_result_only_for_started_application', models.BooleanField(default=False, verbose_name='Mostrar resultado apenas para alunos que iniciaram a prova?')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('exam', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='exams.exam', verbose_name='Caderno de provas que será aplicado')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('room_distribution', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='distribution.roomdistribution', verbose_name='Ensalamento')),
            ],
            options={
                'verbose_name': 'historical Aplicação',
                'verbose_name_plural': 'historical Aplicações',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
